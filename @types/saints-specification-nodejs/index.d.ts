import { CodeMap } from './code-map';
import { TwoDimension, ThreeDimension } from './dimension';
import { SpecError } from './error';
import { DoorValue, EnvMonitorValue, PowerGridValue, UPSValue, RFIDTagValue, CallValue, VideoAnalyseValue, VideoAnalyseType, Face, CarPlate, DeviceControlParam, InterfaceInitParam, InterfaceDescripter, DeviceEventData } from './device-interface';
import { Message } from './message';
import { RestQuery, RestResponse } from './rest';
import { Service, ServiceFinder, ServiceRegister } from './service';
declare const spec: {
    CodeMap: typeof CodeMap;
    SpecError: typeof SpecError;
    TwoDimension: typeof TwoDimension;
    ThreeDimension: typeof ThreeDimension;
    Config: {
        envDevelopment: string;
        envProducton: string;
        defaultConfigPath: string;
        serviceHubPort: number;
    };
    ResourceCode: CodeMap[];
    InterfaceCategory: CodeMap[];
    Message: typeof Message;
    MessageTopic: {
        deviceEvent: CodeMap;
        deviceStatus: CodeMap;
        deviceFault: CodeMap;
        deviceControl: CodeMap;
        custom: CodeMap;
        others: CodeMap;
    };
    MessageType: {
        unknown: CodeMap;
        deviceEvent: CodeMap;
        deviceStatus: CodeMap;
        deviceFault: CodeMap;
        deviceControl: CodeMap;
        custom: CodeMap;
        others: CodeMap;
    };
    DeviceAlarmCode: CodeMap[];
    DeviceEventCode: CodeMap[];
    DeviceStatusCode: CodeMap[];
    DeviceFaultCode: CodeMap[];
    DoorValue: typeof DoorValue;
    EnvMonitorValue: typeof EnvMonitorValue;
    PowerGridValue: typeof PowerGridValue;
    UPSValue: typeof UPSValue;
    RFIDTagValue: typeof RFIDTagValue;
    CallValue: typeof CallValue;
    VideoAnalyseValue: typeof VideoAnalyseValue;
    VideoAnalyseType: typeof VideoAnalyseType;
    Face: typeof Face;
    CarPlate: typeof CarPlate;
    RestQuery: typeof RestQuery;
    RestResponse: typeof RestResponse;
    Service: typeof Service;
    ServiceFinder: typeof ServiceFinder;
    ServiceRegister: typeof ServiceRegister;
    ServiceType: {
        unknown: CodeMap;
        identityService: CodeMap;
        fileHub: CodeMap;
        deviceService: CodeMap;
        cloudProxyService: CodeMap;
        monitorService: CodeMap;
        messageHub: CodeMap;
        eventService: CodeMap;
        logService: CodeMap;
        timeSerialService: CodeMap;
    };
    DeviceControlParam: typeof DeviceControlParam;
    InterfaceInitParam: typeof InterfaceInitParam;
    InterfaceDescripter: typeof InterfaceDescripter;
    DeviceEventType: {
        unknown: number;
        status: number;
        normal: number;
        alarm: number;
        fault: number;
    };
    DeviceEventData: typeof DeviceEventData;
};
export default spec;
